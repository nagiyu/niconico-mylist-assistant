name: deploy

on:
  push:
    branches:
      - master
      - develop
    paths:
      - 'manager/**'
      - 'register/**'
  workflow_dispatch:

jobs:
  deploy-manager:
    if: contains(github.event.head_commit.message, 'manager/') || contains(github.event.commits.*.modified, 'manager/') || contains(github.event.commits.*.added, 'manager/') || contains(github.event.commits.*.removed, 'manager/')
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}

    steps:
    - uses: actions/checkout@v2

    - name: AWS CLI install
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: AWS set Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get Google secrets from AWS SecretsManager
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          GOOGLE_OAUTH_SECRETS, NiconicoMylistAssistant/Manager/Google
        parse-json-secrets: true

    - name: Rewrite sw.js endpoint from secrets
      run: |
        sed -i 's|http://localhost:3000|${{ secrets.MANAGER_BASE_URL }}|g' manager/public/sw.js

    - name: Deploy
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_MANAGER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        cd manager
        docker build -t ${{ secrets.MANAGER_PROJECT_NAME }} .
        docker build \
          --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
          --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          --build-arg GOOGLE_CLIENT_ID=${{ env.GOOGLE_OAUTH_SECRETS_GOOGLE_CLIENT_ID }} \
          --build-arg GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_OAUTH_SECRETS_GOOGLE_CLIENT_SECRET }} \
          --build-arg DYNAMO_TABLE_NAME=${{ secrets.DYNAMO_TABLE_NAME }} \
          --build-arg REGISTER_LAMBDA_ENDPOINT=${{ secrets.REGISTER_LAMBDA_ENDPOINT }} \
          --build-arg SHARED_SECRET_KEY=${{ secrets.SHARED_SECRET_KEY }} \
          --build-arg NEXT_PUBLIC_VAPID_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_VAPID_PUBLIC_KEY }} \
          --build-arg VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }} \
          --build-arg VAPID_SUBJECT=${{ secrets.VAPID_SUBJECT }} \
          -t ${{ secrets.MANAGER_PROJECT_NAME }} .
        docker tag ${{ secrets.MANAGER_PROJECT_NAME }}:latest ${{ secrets.AWS_MANAGER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MANAGER_PROJECT_NAME }}:latest
        docker push ${{ secrets.AWS_MANAGER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MANAGER_PROJECT_NAME }}:latest

    - name: Update Lambda Function
      run: |
        aws lambda update-function-code --function-name ${{ secrets.MANAGER_PROJECT_NAME }} --image-uri ${{ secrets.AWS_MANAGER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MANAGER_PROJECT_NAME }}:latest

  deploy-register:
    if: contains(github.event.head_commit.message, 'register/') || contains(github.event.commits.*.modified, 'register/') || contains(github.event.commits.*.added, 'register/') || contains(github.event.commits.*.removed, 'register/')
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}

    steps:
    - uses: actions/checkout@v2

    - name: AWS CLI install
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: AWS set Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        cd register
        docker build -t ${{ secrets.REGISTER_PROJECT_NAME }} .
        docker build \
          --build-arg AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
          --build-arg S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
          --build-arg SHARED_SECRET_KEY=${{ secrets.SHARED_SECRET_KEY }} \
          --build-arg NOTIFICATION_API_ENDPOINT=${{ secrets.NOTIFICATION_API_ENDPOINT }} \
          -t ${{ secrets.REGISTER_PROJECT_NAME }} .
        docker tag ${{ secrets.REGISTER_PROJECT_NAME }}:latest ${{ secrets.AWS_REGISTER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REGISTER_PROJECT_NAME }}:latest
        docker push ${{ secrets.AWS_REGISTER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REGISTER_PROJECT_NAME }}:latest

    - name: Update Lambda Function
      run: |
        aws lambda update-function-code --function-name ${{ secrets.REGISTER_PROJECT_NAME }} --image-uri ${{ secrets.AWS_REGISTER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REGISTER_PROJECT_NAME }}:latest
