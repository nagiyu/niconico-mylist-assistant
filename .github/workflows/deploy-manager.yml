name: deploy-manager

on:
  push:
    branches:
      - master
      - develop
    paths:
      - 'manager/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}

    steps:
    - uses: actions/checkout@v2

    - name: AWS CLI install
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: AWS set Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get Google secrets from AWS SecretsManager
      id: google-secrets
      run: |
        GOOGLE_CLIENT_ID=$(aws secretsmanager get-secret-value --secret-id "NiconicoMylistAssistant/Manager/Google" --query 'fromjson(SecretString).GOOGLE_CLIENT_ID' --output text)
        GOOGLE_CLIENT_SECRET=$(aws secretsmanager get-secret-value --secret-id "NiconicoMylistAssistant/Manager/Google" --query 'fromjson(SecretString).GOOGLE_CLIENT_SECRET' --output text)
        echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> $GITHUB_OUTPUT
        echo "GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET" >> $GITHUB_OUTPUT

    - name: Deploy
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_MANAGER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        cd manager
        docker build -t ${{ secrets.MANAGER_PROJECT_NAME }} .
        docker build \
          --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
          --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          --build-arg GOOGLE_CLIENT_ID=${{ steps.google-secrets.outputs.GOOGLE_CLIENT_ID }} \
          --build-arg GOOGLE_CLIENT_SECRET=${{ steps.google-secrets.outputs.GOOGLE_CLIENT_SECRET }} \
          --build-arg DYNAMO_TABLE_NAME=${{ secrets.DYNAMO_TABLE_NAME }} \
          --build-arg REGISTER_LAMBDA_ENDPOINT=${{ secrets.REGISTER_LAMBDA_ENDPOINT }} \
          --build-arg SHARED_SECRET_KEY=${{ secrets.SHARED_SECRET_KEY }} \
          --build-arg NEXT_PUBLIC_VAPID_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_VAPID_PUBLIC_KEY }} \
          --build-arg VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }} \
          -t ${{ secrets.MANAGER_PROJECT_NAME }} .
        docker tag ${{ secrets.MANAGER_PROJECT_NAME }}:latest ${{ secrets.AWS_MANAGER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MANAGER_PROJECT_NAME }}:latest
        docker push ${{ secrets.AWS_MANAGER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MANAGER_PROJECT_NAME }}:latest

    - name: Update Lambda Function
      run: |
        aws lambda update-function-code --function-name ${{ secrets.MANAGER_PROJECT_NAME }} --image-uri ${{ secrets.AWS_MANAGER_REPOSITORY_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MANAGER_PROJECT_NAME }}:latest
